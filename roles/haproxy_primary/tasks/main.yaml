---
- name: Putting HTTP Proxy Server Address in /etc/environment
  lineinfile:
    path: /etc/environment
    line: export http_proxy=http://{{ PROXY_SERVER_ADDRESS }}:{{ PROXY_SERVER_PORT }}
  when: PROXY | bool

- name: Putting HTTPS Proxy Server Address in /etc/environment
  lineinfile:
    path: /etc/environment
    line: export https_proxy=http://{{ PROXY_SERVER_ADDRESS }}:{{ PROXY_SERVER_PORT }}
  when: PROXY | bool

- name: Exporting no_proxy ip addresses
  lineinfile:
    path: /etc/environment
    line: export no_proxy='{{ IP_ADDRESSES_NOT_IN_PROXY }}'
  when: PROXY | bool

- name: RedHat | Stopping FirewallD
  service:
    name: firewalld
    state: stopped
    enabled: no
  when: not FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Stopping UFW
  service:
    name: ufw
    state: stopped
    enabled: no
  when: not FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: RedHat | Starting FirewallD
  service:
    name: firewalld
    state: started
    enabled: yes
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Starting UFW
  service:
    name: ufw
    state: started
    enabled: yes
  when: FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: RedHat | Applying FirewallD rules
  firewalld:
    port: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
  loop:
    - 22/tcp
    - 6443/tcp
    - 1936/tcp
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Applying UFW rules
  ufw:
    port: "{{ item }}"
    rule: allow
    proto: tcp
    state: enabled
  loop:
  - 22
  - 6443
  - 1936
  when: FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: RedHat | Adding FirewallD Mascared
  firewalld:
    masquerade: 'True'
    state: enabled
    permanent: 'True'
    immediate: 'True'
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: RedHat | Restarting FirewallD service
  systemd:
    state: restarted
    daemon_reload: yes
    name: firewalld
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Restarting UFW service
  systemd:
    state: restarted
    daemon_reload: yes
    name: ufw
  when: FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: Installing HaProxy
  package:
    name: haproxy
    state: present

- name: Installing KeepaliveD
  package:
    name: keepalived
    state: present

- name: Starting HaProxy service
  service:
    name: haproxy
    state: started
  notify: "enable haproxy"

- name: Starting KeepaliveD service
  service:
    name: keepalived
    state: started
  notify: "enable keepalived"

- name: Setting IPv4 forward in sysctl.conf
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_file: /etc/sysctl.conf
    sysctl_set: yes
    state: present
    reload: yes

- name: Seting IPV4 bind in sysctl.conf
  sysctl:
    name: net.ipv4.ip_nonlocal_bind
    value: '1'
    sysctl_file: /etc/sysctl.conf
    sysctl_set: yes
    state: present
    reload: yes

- name: Configuring KeepaliveD
  template:
    src: keepalived.cfg.j2
    dest: /etc/keepalived/keepalived.conf
  vars:
    priority_id: 100
  notify: "restart keepalived"

- name: Adding keepalive script user
  user:
    name: keepalived_script
    comment: KeepaliveD System User
    shell: /sbin/nologin

- name: Configuring HaProxy
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
  notify: "restart haproxy"

# - name: Restarting KeepaliveD
#   systemd:
#     name: keepalived
#     state: restarted
#
# - name: Restarting HaProxy
#   systemd:
#     name: haproxy
#     state: restarted
