---
- name: Disabling SWAP
  replace:
    path: /etc/fstab
    regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
    replace: '#\1\2\3swap\4'
    backup: yes

- name: Turning off Swap
  shell: | 
    swapoff -a
  register: swapoff

- name: RedHat | Puting SELinux in permissive mode
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: ansible_facts['os_family'] == "RedHat"

- name: RedHat | Starting FirewallD
  systemd:
    name: firewalld
    state: stopped
    enabled: no
  when: not FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: RedHat | Starting FirewallD
  systemd:
    name: firewalld
    state: started
    enabled: yes
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Stopping UFW
  systemd:
    name: ufw
    state: stopped
    enabled: no
  when: not FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: Ubuntu | Starting UFW
  systemd:
    name: ufw
    state: started
    enabled: yes
  when: FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: RedHat | Applying FirewallD rules
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
  loop:
  - '22/tcp'
  - '6443/tcp'
  - 2379-2380/tcp
  - '10250/tcp'
  - '10251/tcp'
  - '10252/tcp'
  - 30000-32767/tcp
  - 6783-6784/udp
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Applying UFW rules
  ufw:
    port: "{{ item }}"
    rule: allow
    proto: tcp
    state: enabled
  loop:
  - '22'
  - '6443'
  - 2379:2380
  - '10250'
  - '10251'
  - '10252'
  - 30000:32767
  - '6783'
  when: FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: Ubuntu | UFW Rules UDP
  ufw:
    port: "{{ item }}"
    rule: allow
    proto: udp
    state: enabled
  loop:
  - 6783:6784
  when: FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: RedHat | Adding FirewallD Mascared
  ansible.posix.firewalld:
    masquerade: 'True'
    permanent: 'True'
    immediate: 'True'
    state: enabled
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: RedHat | Restarting FirewallD service
  systemd:
    state: restarted
    daemon_reload: yes
    name: firewalld
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Restarting UFW service
  systemd:
    state: restarted
    daemon_reload: yes
    name: ufw
  when: FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: Enabling br_netfilter Kernel Module
  modprobe:
    name: br_netfilter
    state: present

- name: Enabling overlay Kernel Module
  modprobe:
    name: overlay
    state: present

- name: RedHat | Creating Kubernetes modules file
  ansible.builtin.file:
    path: /etc/modules-load.d/kubernetes.conf
    state: touch
    mode: '0755'
  when: ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Making overlay and br_netfilter Module Permanent
  lineinfile:
    path: /etc/modules
    line: "{{ item }}"
  with_items:
  - br_netfilter
  - overlay
  when: ansible_facts['distribution'] == "Ubuntu"

- name: RedHat | Making overlay and br_netfilter Module Permanent
  lineinfile:
    path: /etc/modules-load.d/kubernetes.conf
    line: "{{ item }}"
  with_items:
  - br_netfilter
  - overlay
  when: ansible_facts['os_family'] == "RedHat"

- name: Enabling IPv4 bridge Kernel Module
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: '1'
    sysctl_file: /etc/sysctl.d/kubernetes.conf
    sysctl_set: yes
    state: present
    reload: yes

- name: Enabling IPv6 bridge Kernel Module
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: '1'
    sysctl_file: /etc/sysctl.d/kubernetes.conf
    sysctl_set: yes
    state: present
    reload: yes

- name: Enabling IPv4 forward Kernel Module
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_file: /etc/sysctl.d/kubernetes.conf
    sysctl_set: yes
    state: present
    reload: yes

- name: Ubuntu | Adding CRI-O GPG Key
  apt_key:
    url: "{{ item }}"
    state: present
  loop:
  - 'https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/Release.key'
  - 'https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:1.21/xUbuntu_18.04/Release.key'
  when: ansible_facts['distribution'] == "Ubuntu" and CRIO | bool

- name: Ubuntu | Adding CRI-O Repository
  ansible.builtin.apt_repository:
    repo: "{{ item }}"
    state: present
  loop:
  - 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/ /'
  - 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.21/xUbuntu_18.04/ /'
  when: ansible_facts['distribution'] == "Ubuntu" and CRIO | bool

- name: Redhat | Adding Libcontainers Repo
  yum_repository:
    name: devel_kubic_libcontainers_stable
    description: Releases of Upstream github.com/containers packages (CentOS_7)
    baseurl: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_7/
    gpgcheck: "yes"
    gpgkey: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_7/repodata/repomd.xml.key
    enabled: "yes"
  when: ansible_facts['os_family'] == "RedHat" and CRIO | bool

- name: Redhat | Adding Crio Repo
  yum_repository:
    name: devel_kubic_libcontainers_stable_cri-o_1.21
    description: devel:kubic:libcontainers:stable:cri-o:1.21 (CentOS_7)
    baseurl: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.21/CentOS_7/
    gpgcheck: "yes"
    gpgkey: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.21/CentOS_7/repodata/repomd.xml.key
    enabled: "yes"
  when: ansible_facts['os_family'] == "RedHat" and CRIO | bool

- name: Ubuntu | Installing CRI-O
  package:
    name: [
      'cri-o',
      'cri-o-runc',
      'cri-tools',
      'runc'
    ]
    update_cache: true
    state: present
  when: ansible_facts['distribution'] == "Ubuntu" and CRIO | bool

- name: RedHat | Installing CRI-O
  package:
    name: [
      'cri-o',
      'cri-tools',
      'runc'
    ]
    update_cache: true
    state: present
  when: CRIO | bool and ansible_facts['os_family'] == "RedHat"

- name: Creating CNI Directory
  file:
    path: /etc/cni/net.d
    state: directory

- name: Puting CRIO File into /etc/cni/net.d/
  copy:
    src: ../files/crio.conf
    dest: /etc/cni/net.d/10-crio.conf
    mode: 0644
  when: CRIO | bool

- name: Ubuntu | Puting Container Storage config into /etc/containers
  copy:
    src: ../files/storage.conf
    dest: /etc/containers/storage.conf
    mode: 0644
  when: ansible_facts['distribution'] == "Ubuntu" and CRIO | bool

- name: Puting Kubelet Config for CRIO
  copy:
    src: ../files/crio-kubelet.conf
    dest: /etc/default/kubelet
    mode: 0644
  when: CRIO | bool

- name: Ubuntu | Adding Kubernetes APT signing key
  ansible.builtin.apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg.asc
    state: present
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Ubuntu | Adding Kubernetes repository
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present
  when: ansible_facts['distribution'] == "Ubuntu"

- name: RedHat | Adding Kubernetes repository
  yum_repository:
    name: Kubernetes
    description: Kubernetes Binaries
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
    gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    gpgcheck: yes
    repo_gpgcheck: yes
    enabled: yes
    exclude: kubelet kubeadm kubectl
  when: ansible_facts['os_family'] == "RedHat"

- name: RedHat | Installing Kubernetes packages
  package:
    name: [
      'kubelet-1.21.3',
      'kubeadm-1.21.3',
      'kubectl-1.21.3'
    ]
    state: present
    disable_excludes: Kubernetes
  when: ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Installing Kubernetes packages
  package:
    name: [
      'kubelet=1.21.3-00',
      'kubeadm=1.21.3-00',
      'kubectl=1.21.3-00'
    ]
    state: present
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Restarting CRI-O Service
  systemd:
    name: crio
    state: restarted
    daemon_reload: yes
    enabled: yes
  when: CRIO | bool

- name: Restarting Kubelet Service
  systemd:
    name: kubelet
    state: restarted
    daemon_reload: yes
    enabled: yes