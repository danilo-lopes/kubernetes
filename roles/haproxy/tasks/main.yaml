---
- name: Puting SELinux in permissive mode
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: ansible_facts['os_family'] == "RedHat"

- name: RedHat | Stopping FirewallD
  systemd:
    name: firewalld
    state: stopped
    enabled: no
  when: not FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Stopping UFW
  systemd:
    name: ufw
    state: stopped
    enabled: no
  when: not FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: RedHat | Starting FirewallD
  systemd:
    name: firewalld
    state: started
    enabled: yes
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Starting UFW
  systemd:
    name: ufw
    state: started
    enabled: yes
  when: FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: RedHat | Applying FirewallD rules
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: 'True'
    immediate: 'True'
    state: enabled
  loop:
    - 22/tcp
    - 6443/tcp # Kubernetes Control Plane Port
    - 1936/tcp # HaProxy Web Console
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Applying UFW rules
  ufw:
    port: "{{ item }}"
    rule: allow
    proto: tcp
    state: enabled
  loop:
  - '22'
  - '6443'
  - '1936'
  when: FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: RedHat | Applying FirewallD rules for VRRP Multi-Cast
  ansible.posix.firewalld:
    source: 224.0.0.18
    permanent: 'True'
    immediate: 'True'
    state: enabled
  when: FIREWALL | bool and CLUSTER_HAPROXY | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Applying UFW rules for VRRP Multi-Cast
  ufw:
    rule: allow
    dest: 224.0.0.18
    state: enabled
  when: FIREWALL | bool and CLUSTER_HAPROXY | bool and ansible_facts['distribution'] == "Ubuntu"

- name: RedHat | Adding FirewallD Mascared
  ansible.posix.firewalld:
    masquerade: 'True'
    permanent: 'True'
    immediate: 'True'
    state: enabled
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: RedHat | Restarting FirewallD service
  systemd:
    state: restarted
    daemon_reload: yes
    name: firewalld
  when: FIREWALL | bool and ansible_facts['os_family'] == "RedHat"

- name: Ubuntu | Restarting UFW service
  systemd:
    state: restarted
    daemon_reload: yes
    name: ufw
  when: FIREWALL | bool and ansible_facts['distribution'] == "Ubuntu"

- name: Installing HaProxy
  package:
    name: haproxy
    state: present

- name: Installing KeepaliveD
  package:
    name: keepalived
    state: present
  when: CLUSTER_HAPROXY | bool

- name: Starting HaProxy service
  service:
    name: haproxy
    state: started
  notify: "enable haproxy"

- name: Starting KeepaliveD service
  systemd:
    name: keepalived
    state: started
  notify: "enable keepalived"
  when: CLUSTER_HAPROXY | bool

- name: Setting IPv4 forward in sysctl.conf
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_file: /etc/sysctl.conf
    sysctl_set: yes
    state: present
    reload: yes

- name: Seting IPV4 bind in sysctl.conf
  ansible.posix.sysctl:
    name: net.ipv4.ip_nonlocal_bind
    value: '1'
    sysctl_file: /etc/sysctl.conf
    sysctl_set: yes
    state: present
    reload: yes

- name: Configuring KeepaliveD
  template:
    src: keepalived.cfg.j2
    dest: /etc/keepalived/keepalived.conf
  notify: "restart keepalived"
  when: CLUSTER_HAPROXY | bool

- name: Configuring HaProxy
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
  notify: "restart haproxy"
